import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as i,c as l,a as e,b as t,d as r,e as o}from"./app-ff1d42f3.js";const c={},d={class:"hint-container info"},p=e("p",{class:"hint-container-title"},"相关信息",-1),u=e("p",null,"本文参考和转载文章",-1),v={href:"https://blog.csdn.net/happydeer/article/details/17618935",target:"_blank",rel:"noopener noreferrer"},h=o(`<h1 id="git工作流-gitflow" tabindex="-1"><a class="header-anchor" href="#git工作流-gitflow" aria-hidden="true">#</a> Git工作流-Gitflow</h1><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><h3 id="常用分支概览" tabindex="-1"><a class="header-anchor" href="#常用分支概览" aria-hidden="true">#</a> 常用分支概览</h3><ul><li>master：稳定的最新版本分支，线上版本</li><li>hotfix：用于维护的分支</li><li>release：用于（测试）发布的分支</li><li>develop：用于集成的分支</li><li>feature：用于功能开发的分支</li></ul><p>示例图如下：</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291531137.png" alt="gitflow" tabindex="0" loading="lazy"><figcaption>gitflow</figcaption></figure><h3 id="分支管理具体说明" tabindex="-1"><a class="header-anchor" href="#分支管理具体说明" aria-hidden="true">#</a> 分支管理具体说明</h3><ol><li>中云监测平台长期存在两个分支master跟develop分支。Master分支上的最新代码永远是版本发布状态。Develop则是最新的开发进度。</li><li></li></ol><p>Hotfix分支是用来做线上紧急BUG,命名一般为hotfix-xxx。xxx对应版本号,例如，master分支上最新版本为3.5.0，此时线上环境出现bug需要修改代码重新部署时，应在master分支上新建一个紧急分支，分支名称命名为hotfix-3.5.1。问题修复后，合并回master和develop分支。Master此时最新代码对应版本为master-3.5.1。<br> 3. Release 分支用来做版本发布的预发布分支，建议命名为 release-xxx。例如在软件 1.0.0 版本的功能全部开发完成，提交测试之后，从<br> develop 检出release-1.0.0 ,测试中出现的小问题，在 release 分支进行修改提交，测试完毕准备发布的时候，代码会合并到 master<br> 和 develop，master 分支合并后会打上对应版本标签 v1.0.0, 合并后删除自己，这样做的好处是，在测试的时候，不影响下一个版本功能并行开发。（具体场景会使用此分支）<br> 4. Feature 分支用来做分模块功能开发，建议命名为feature-xxx,模块完成之后，会合并到 develop 分支，然后删除</p><h2 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则" aria-hidden="true">#</a> 命名规则</h2><ul><li>hotfix-xxx</li><li>release-xxx</li><li>feature-xxx</li></ul><p>​ 其中xxx为对应的版本号或者模块名称</p><h2 id="标签规则" tabindex="-1"><a class="header-anchor" href="#标签规则" aria-hidden="true">#</a> 标签规则</h2><p>hotfix合并入master时，标签为xxx-</p><h2 id="流程举例说明" tabindex="-1"><a class="header-anchor" href="#流程举例说明" aria-hidden="true">#</a> 流程举例说明</h2><p>​ 举一个例子，以高支模版本和V4.6.2版本并行开发为例。lc和zp负责高支模，lzy负责4.6.2</p><ol><li>基于develop模块新建两个新分支，分别命名为feature-v4.6.2和feature-gzm</li><li>lzy开发完毕v4.6.2，将代码合并到develop（开发完毕后才能合并），加入此时高支模还没有开发完成</li><li>v4.6.2可以进行测试了，从develop模块克隆新分支，命名为release-v4.6.2，在此分支上进行测试，在这个分支上只能进行修复bug，做一些文档工作或者跟发布相关的任务</li><li>v4.6.2测试完毕，合并release-v4.6.2分支入develop分支，最后删除release-v4.6.2</li><li>feature-gzm分支重复234的过程</li><li>v4.6.2上线后，develop合并入master，某天发现了一个线上bug，基于master分支新建hotfix-v4.6.2分支用于解决线上bug，解决完毕后，合并入master和develop分支</li></ol><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="为什么单独出一个发布分支" tabindex="-1"><a class="header-anchor" href="#为什么单独出一个发布分支" aria-hidden="true">#</a> 为什么单独出一个发布分支？</h3><blockquote><p>​ 使用专门的一个分支来为发布做准备的好处是，在一个团队（lzy）忙于当前的发布的同时，另一个团队（lc、zp）可以继续为接下来的一次发布开发新功能。</p><p>​ 这也有助于清晰表明开发的状态，比如说，团队在汇报状态时可以轻松使用这样的措辞，“这星期我们要为发布4.0版本做准备。”从代码仓库的结构上也能直接反映出来。命名规则为：release-xxx</p><p>​ 一旦创建了这个分支并把它推向中央仓库，这次产品发布包含的功能也就固定下来了。任何还处于开发状态的功能只能等待下一个发布周期。</p></blockquote><h3 id="为什么单独出一个hotfix分支" tabindex="-1"><a class="header-anchor" href="#为什么单独出一个hotfix分支" aria-hidden="true">#</a> 为什么单独出一个hotfix分支？</h3><blockquote><p>​ 这种为解决紧急问题专设的绿色通道，让团队不必打乱当前的工作流程，也不必等待下一次的产品发布周期。你可以把用于维护的分支看成是依附于master的一种特别的发布分支。</p></blockquote><h3 id="master的作用" tabindex="-1"><a class="header-anchor" href="#master的作用" aria-hidden="true">#</a> master的作用</h3><blockquote><p>​ master只是用于保存官方的发布历史，而develop分支才是用于集成各种功能开发的分支。使用版本号为master上的所有提交打标签（tag）也很方便</p></blockquote><h2 id="常见操作场景" tabindex="-1"><a class="header-anchor" href="#常见操作场景" aria-hidden="true">#</a> 常见操作场景</h2><p>开发新模块，需建立分支并且提交代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 注意此时是基于develop新建的</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-xxx develop 
<span class="token comment"># git三部曲</span>
<span class="token function">git</span> status
<span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>some-file<span class="token operator">&gt;</span>
<span class="token function">git</span> commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>功能开发完成后合并入develop分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin develop
<span class="token function">git</span> checkout develop
<span class="token function">git</span> merge feature-xxx
<span class="token function">git</span> push
<span class="token comment"># 合并后即可删除</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新模块提交测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> release-xxx develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试完毕，需要上线</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 合并入develop</span>
<span class="token function">git</span> checkout develop
<span class="token function">git</span> merge release-xxx
<span class="token function">git</span> push
<span class="token comment"># 合并入master</span>
<span class="token function">git</span> checkout master
<span class="token function">git</span> merge release-xxx
<span class="token function">git</span> push
<span class="token comment">#</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> release-0.1
<span class="token comment"># 打标签</span>
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> xxx -m<span class="token string">&quot;Initial public release&quot;</span> master
<span class="token function">git</span> push <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正式环境需要改bug</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 新建分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix-xxx master
<span class="token comment"># 改完bug后,合并入develop</span>
<span class="token function">git</span> checkout develop
<span class="token function">git</span> merge hotfix-xxx 
<span class="token function">git</span> push
<span class="token comment"># 合并入master</span>
<span class="token function">git</span> checkout master
<span class="token function">git</span> merge develop
<span class="token function">git</span> push
<span class="token comment"># 删除bug分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> iotfix-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function m(b,x){const a=s("ExternalLinkIcon");return i(),l("div",null,[e("div",d,[p,u,e("p",null,[e("a",v,[t("Gitflow工作流程"),r(a)])])]),h])}const k=n(c,[["render",m],["__file","gitflow.html.vue"]]);export{k as default};
