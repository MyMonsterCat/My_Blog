import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as p,a as n,b as o,d as c,e as l}from"./app-ff1d42f3.js";const i={},r=l(`<h2 id="_1-如何判断对象可以回收" tabindex="-1"><a class="header-anchor" href="#_1-如何判断对象可以回收" aria-hidden="true">#</a> 1.如何判断对象可以回收</h2><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h3><p>优点: <strong>原理简单，判断效率高</strong></p><blockquote><p>其效率高体现在</p><ul><li>回收没有延迟性，无需等到内存不够的时候才开始回收，运行时根据对象计数器是否为 0，可以直接回收</li><li>在垃圾回收过程中，应用无需挂起；如果申请内存时，内存不足，则立刻报 OOM 错误</li><li>区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象</li></ul></blockquote><p>弊端:</p><ul><li>循环引用时，两个对象的计数都为1，导致两个对象都无法被释放，会引发内存泄漏</li><li>每次对象被引用时，都需要去更新计数器，有一点时间开销</li><li>浪费 CPU 资源，即使内存够用，仍然在运行时进行计数器的统计。</li></ul><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303300959630.png" alt="引用计数法" style="zoom:67%;"><h3 id="可达性分析算法" tabindex="-1"><a class="header-anchor" href="#可达性分析算法" aria-hidden="true">#</a> 可达性分析算法</h3><blockquote><p>也可以称为根搜索算法、追踪性垃圾收集</p></blockquote><p>原理: 通过 GC Roots 作为起始点进行搜索（GC Roots 是一组活跃的引用，不是对象，放在 GC Roots Set 集合）</p><ul><li>能够到达到的对象都是存活的（只有能够被根对象集合直接或者间接连接的对象才是存活对象），换言之该对象是可达的</li><li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li></ul><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301013328.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">可以作为GC Root的对象</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。- 方法区中类静态属性引用的对象，例如字符串常量池（string Table）里的引用</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li><li>同步锁 synchronized 持有的对象</li><li>...(详见书本3.2.2)</li></ul></div><h2 id="_2-引用类型" tabindex="-1"><a class="header-anchor" href="#_2-引用类型" aria-hidden="true">#</a> 2.引用类型</h2><h3 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用" aria-hidden="true">#</a> 强引用</h3><p>被强引用关联的对象不会被回收，只有所有 GCRoots 都不通过强引用引用该对象，才能被垃圾回收</p><ul><li>强引用可以直接访问目标对象</li><li>虚拟机宁愿抛出 OOM 异常，也不会回收强引用所指向对象</li><li>强引用可能导致<strong>内存泄漏</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//  使用 new 一个新对象的方式来创建强引用</span>
<span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用" aria-hidden="true">#</a> 软引用</h3><p>被软引用关联的对象只有在<mark>内存不够</mark>的情况下才会被回收</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 SoftReference 类来创建软引用</span>
<span class="token comment">// list是强引用，而SoftReference和byte数组则是软引用</span>
<span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>ref<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>软引用一般和引用队列<code>ReferenceQueue</code>（也可以不和引用队列）联合使用（目的是<strong>清理软引用</strong>），使用的思路为：</p><ul><li>如果软引用所引用对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中</li><li></li></ul><p>当JVM内存不够时，将该队列从队头的元素进行出队，即虚拟机会尽可能优先回收长时间闲置不用的软引用对象，对那些刚构建的或刚使用过的&quot;<br> 较新的&quot;软对象会被虚拟机尽可能保留。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> referenceQueue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> softReference<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>referenceQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        str<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 软引用对象是在jvm内存不够的时候才会被回收，我们调用System.gc()方法只是起通知作用，JVM什么时候扫描回收对象是JVM自己的状态决定的。就算扫描到软引用对象也不一定会回收它，只有内存不够的时候才会回收。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 所以这里还是能获取到abc</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
        <span class="token comment">// 手动清理软引用</span>
        <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reference<span class="token operator">=</span>referenceQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
        <span class="token comment">// 当JVM内存不足时，JVM首先将软引用中的对象引用置为null，然后通知垃圾回收器进行回收：</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">JVM</span>内存不足<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 将软引用中的对象引用置为null</span>
        str<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知垃圾回收器进行回收</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用场景</strong>：内存敏感的高速缓存</p><h3 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用" aria-hidden="true">#</a> 弱引用</h3><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 WeakReference 类来实现弱引用</span>
  <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> weakReference<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        str<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弱引用的使用和软引用类似，也是和引用队列<code>ReferenceQueue</code>联合使用（也可以不和引用队列联合使用）</p><h3 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用" aria-hidden="true">#</a> 虚引用</h3><ul><li><p>虚引用顾名思义，就是形同虚设。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象</p></li><li><p>如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收</p></li><li><p><strong>为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知</strong></p></li><li><p>必须配合引用队列使用</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReferenceQueue</span> queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建虚引用，要求必须与一个引用队列关联</span>
        <span class="token class-name">PhantomReference</span> pr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景: 直接内存释放</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301151216.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图，如果B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象放入引用队列中，然后调用它的clean方法来释放直接内存（详见<br><strong>内存结构-&gt;直接内存</strong>章节）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ByteBuffer使用了实现类DirectByteBuffer</span>
<span class="token comment">// DirectByteBuffer其构造函数使用了Cleaner类，而Cleaner类为虚引用</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cleaner</span> <span class="token keyword">extends</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="终结器引用" tabindex="-1"><a class="header-anchor" href="#终结器引用" aria-hidden="true">#</a> 终结器引用</h3><ul><li></li></ul><p>所有的类都继承自Object类，Object类有一个finalize方法。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了</p><ul><li>必须配合引用队列使用</li></ul><p><s>懒得写，</s><strong>详见书本3.2.4</strong></p><h2 id="_3-垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_3-垃圾回收算法" aria-hidden="true">#</a> 3.垃圾回收算法</h2><h3 id="理论-分代收集" tabindex="-1"><a class="header-anchor" href="#理论-分代收集" aria-hidden="true">#</a> 理论：分代收集</h3><blockquote><p>详细介绍请参考书本3.3.1分代收集理论</p></blockquote><p>Java堆一般会分为新生代和老年代两个区域，分别对这两个区域按照实际情况采取适当的收集算法。</p><h3 id="三种回收算法的对比" tabindex="-1"><a class="header-anchor" href="#三种回收算法的对比" aria-hidden="true">#</a> 三种回收算法的对比</h3><table><thead><tr><th>Mark-Sweep</th><th>Mark-Compact</th><th>Copying</th><th></th></tr></thead><tbody><tr><td>速度</td><td>中等</td><td>最慢</td><td>最快</td></tr><tr><td>空间开销</td><td>少（但会堆积碎片）</td><td>少（不堆积碎片）</td><td>通常需要活对象的 2 倍大小（不堆积碎片）</td></tr><tr><td>移动对象</td><td>否</td><td>是</td><td>是</td></tr></tbody></table><h3 id="标记-清除" tabindex="-1"><a class="header-anchor" href="#标记-清除" aria-hidden="true">#</a> 标记-清除</h3><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301513239.png" style="zoom:50%;"><p>定义：标记清除算法顾名思义，是指在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间</p><blockquote><p>这里的腾出内存空间并不是将内存空间的字节清0，而是记录下这段内存的起始结束地址，下次分配内存的时候，会直接覆盖这段内存</p></blockquote><p>缺点：</p><ul><li>执行效率不稳定，效率随对象数量增长而降低</li><li>容易产生大量的内存碎片，可能无法满足大对象的内存分配，一旦导致无法分配对象，那就会导致jvm启动gc，一旦启动gc，我们的应用程序就会暂停，这就导致应用的响应速度变慢</li></ul><h3 id="标记-整理" tabindex="-1"><a class="header-anchor" href="#标记-整理" aria-hidden="true">#</a> 标记-整理</h3><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301513378.png" style="zoom:50%;"><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p><p>缺点：如果在老年代这种每次回收都有大量对象存活的区域，移动存活对象是种极大负担，同时也会触发STW</p><h3 id="标记-复制" tabindex="-1"><a class="header-anchor" href="#标记-复制" aria-hidden="true">#</a> 标记-复制</h3><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301522032.png" style="zoom:50%;"><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301523286.png" style="zoom:50%;"><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202303301523100.png" alt="img" style="zoom:50%;"><p>流程：</p><ul><li>将内存分为等大小的两个区域，FROM和TO（TO中为空）</li><li>先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象</li><li>交换FROM和TO</li></ul><p>优点：避免内存碎片的问题</p><p>缺点：占用双倍的内存空间（浪费了一半空间）。</p><h2 id="_4-hotspot算法细节" tabindex="-1"><a class="header-anchor" href="#_4-hotspot算法细节" aria-hidden="true">#</a> 4.HotSpot算法细节</h2><p>参考链接：</p>`,68),u={href:"https://juejin.cn/post/6844903665241686029",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[n("a",u,[o("理解Java的强引用、软引用、弱引用和虚引用"),c(s)])])])}const g=a(i,[["render",d],["__file","gc.html.vue"]]);export{g as default};
