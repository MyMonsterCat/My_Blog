import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as r,a as n,b as s,d as e,e as i}from"./app-ff1d42f3.js";const p={},c=i(`<h1 id="nginx从入门到实践" tabindex="-1"><a class="header-anchor" href="#nginx从入门到实践" aria-hidden="true">#</a> Nginx从入门到实践</h1><h2 id="nginx基本概念" tabindex="-1"><a class="header-anchor" href="#nginx基本概念" aria-hidden="true">#</a> Nginx基本概念</h2><h3 id="什么是nginx" tabindex="-1"><a class="header-anchor" href="#什么是nginx" aria-hidden="true">#</a> 什么是Nginx</h3><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Nginx (&quot;engine x&quot;)是一个高性能的HTTP和反向代理服务器，特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好
Nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验，有报告表明能支持高达50000个并发连接数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正向代理" tabindex="-1"><a class="header-anchor" href="#正向代理" aria-hidden="true">#</a> 正向代理</h3><p>​ 在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</p><h3 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理" aria-hidden="true">#</a> 反向代理</h3><p>​<br> 反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291535365.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3><p>​ 由于单个服务器解决不了，所以我们增加服务器的数量，然后将请求分发到各个服务器上,将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上,将负载分发到不同的服务器，也就是我们所说的负载均衡</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291535215.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="动静分离" tabindex="-1"><a class="header-anchor" href="#动静分离" aria-hidden="true">#</a> 动静分离</h3><p>​ 为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291535085.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="nginx安装" tabindex="-1"><a class="header-anchor" href="#nginx安装" aria-hidden="true">#</a> Nginx安装</h2><p>操作平台 CentOS7</p><h3 id="安装相关依赖" tabindex="-1"><a class="header-anchor" href="#安装相关依赖" aria-hidden="true">#</a> 安装相关依赖</h3><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装</p><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>yum install gcc<span class="token operator">-</span>c<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre<br> 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库</p><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>yum install <span class="token operator">-</span>y pcre pcre<span class="token operator">-</span>devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库</p><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>yum install <span class="token operator">-</span>y zlib zlib<span class="token operator">-</span>devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br> nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库</p><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>yum install <span class="token operator">-</span>y openssl openssl<span class="token operator">-</span>devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装nginx" tabindex="-1"><a class="header-anchor" href="#安装nginx" aria-hidden="true">#</a> 安装Nginx</h3><h4 id="下载" tabindex="-1"><a class="header-anchor" href="#下载" aria-hidden="true">#</a> 下载</h4>`,28),d=n("code",null,".tar.gz",-1),u={href:"https://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[s("b. "),n("strong",null,[s("使用"),n("code",null,"wget"),s("命令下载（推荐）")]),s("。确保系统已经安装了wget，如果没有安装，执行 yum install wget 安装。")],-1),v=i(`<div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>wget <span class="token operator">-</span>c https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>nginx<span class="token punctuation">.</span>org<span class="token operator">/</span>download<span class="token operator">/</span>nginx<span class="token operator">-</span><span class="token number">1.19</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="解压" tabindex="-1"><a class="header-anchor" href="#解压" aria-hidden="true">#</a> 解压</h4><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>tar <span class="token operator">-</span>zxvf nginx<span class="token operator">-</span><span class="token number">1.19</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h4><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code><span class="token punctuation">.</span><span class="token operator">/</span>configure
make <span class="token operator">&amp;&amp;</span> make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h4><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>ps aux<span class="token operator">|</span>grep nginx #查看是否开启
 
<span class="token punctuation">.</span><span class="token operator">/</span>nginx <span class="token operator">-</span>v #查看版本
 
cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx
<span class="token punctuation">.</span><span class="token operator">/</span>nginx #启动
<span class="token punctuation">.</span><span class="token operator">/</span>nginx <span class="token operator">-</span>s stop #停止
<span class="token punctuation">.</span><span class="token operator">/</span>nginx <span class="token operator">-</span>s quit #停止
<span class="token punctuation">.</span><span class="token operator">/</span>nginx <span class="token operator">-</span>s reload #重载
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx配置文件" tabindex="-1"><a class="header-anchor" href="#nginx配置文件" aria-hidden="true">#</a> Nginx配置文件</h2><p>Nginx 配置文件由三部分组成</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>.              <span class="token comment">#全局块</span>

events <span class="token punctuation">{</span>         <span class="token comment">#events块</span>
   <span class="token punctuation">..</span>.
<span class="token punctuation">}</span>

http      <span class="token comment">#http块</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">..</span>.   <span class="token comment">#http全局块</span>
    server        <span class="token comment">#server块</span>
    <span class="token punctuation">{</span> 
        <span class="token punctuation">..</span>.       <span class="token comment">#server全局块</span>
        location <span class="token punctuation">[</span>PATTERN<span class="token punctuation">]</span>   <span class="token comment">#location块</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">..</span>.
        <span class="token punctuation">}</span>
        location <span class="token punctuation">[</span>PATTERN<span class="token punctuation">]</span> 
        <span class="token punctuation">{</span>
            <span class="token punctuation">..</span>.
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    server
    <span class="token punctuation">{</span>
      <span class="token punctuation">..</span>.
    <span class="token punctuation">}</span>
    <span class="token punctuation">..</span>.     <span class="token comment">#http全局块</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>第一部分 全局块</strong><br> 主要设置一些影响 nginx 服务器整体运行的配置指令。<br> 比如： worker_processes 1; ， worker_processes 值越大，可以支持的并发处理量就越多。</p></li><li><p><strong>第二部分 events块</strong><br> events 块涉及的指令主要影响Nginx服务器与用户的网络连接。<br> 比如： worker_connections 1024; ，支持的最大连接数。</p></li><li><p><strong>第三部分 http块</strong><br> http 块又包括 http 全局块和 server 块，是服务器配置中最频繁的部分，包括配置代理、缓存、日志定义等绝大多数功能。</p></li><li><ul><li><strong>server块</strong>：配置虚拟主机的相关参数。</li><li><strong>location块</strong>：配置请求路由，以及各种页面的处理情况。</li></ul></li></ul><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291535828.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">########### 每个指令必须有分号结束。#################</span>
<span class="token comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span>
<span class="token comment">#worker_processes 2;  #允许生成的进程数，默认为1</span>
<span class="token comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span>
error_log log/error.log debug<span class="token punctuation">;</span>  <span class="token comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span>
events <span class="token punctuation">{</span>
    accept_mutex on<span class="token punctuation">;</span>   <span class="token comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span>
    multi_accept on<span class="token punctuation">;</span>  <span class="token comment">#设置一个进程是否同时接受多个网络连接，默认为off</span>
    <span class="token comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment">#最大连接数，默认为512</span>
<span class="token punctuation">}</span>
http <span class="token punctuation">{</span>
    include       mime.types<span class="token punctuation">;</span>   <span class="token comment">#文件扩展名与文件类型映射表</span>
    default_type  application/octet-stream<span class="token punctuation">;</span> <span class="token comment">#默认文件类型，默认为text/plain</span>
    <span class="token comment">#access_log off; #取消服务日志    </span>
    log_format myFormat <span class="token string">&#39;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#39;</span><span class="token punctuation">;</span> <span class="token comment">#自定义格式</span>
    access_log log/access.log myFormat<span class="token punctuation">;</span>  <span class="token comment">#combined为日志格式的默认值</span>
    sendfile on<span class="token punctuation">;</span>   <span class="token comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span>
    sendfile_max_chunk 100k<span class="token punctuation">;</span>  <span class="token comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span>
    keepalive_timeout <span class="token number">65</span><span class="token punctuation">;</span>  <span class="token comment">#连接超时时间，默认为75s，可以在http，server，location块。</span>

    upstream mysvr <span class="token punctuation">{</span>   
      server <span class="token number">127.0</span>.0.1:7878<span class="token punctuation">;</span>
      server <span class="token number">192.168</span>.10.121:3333 backup<span class="token punctuation">;</span>  <span class="token comment">#热备</span>
    <span class="token punctuation">}</span>
    error_page <span class="token number">404</span> https://www.baidu.com<span class="token punctuation">;</span> <span class="token comment">#错误页</span>
    server <span class="token punctuation">{</span>
        keepalive_requests <span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment">#单连接请求上限次数。</span>
        listen       <span class="token number">4545</span><span class="token punctuation">;</span>   <span class="token comment">#监听端口</span>
        server_name  <span class="token number">127.0</span>.0.1<span class="token punctuation">;</span>   <span class="token comment">#监听地址       </span>
        location  ~*^.+$ <span class="token punctuation">{</span>       <span class="token comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span>
           <span class="token comment">#root path;  #根目录</span>
           <span class="token comment">#index vv.txt;  #设置默认页</span>
           proxy_pass  http://mysvr<span class="token punctuation">;</span>  <span class="token comment">#请求转向mysvr 定义的服务器列表</span>
           deny <span class="token number">127.0</span>.0.1<span class="token punctuation">;</span>  <span class="token comment">#拒绝的ip</span>
           allow <span class="token number">172.18</span>.5.54<span class="token punctuation">;</span> <span class="token comment">#允许的ip           </span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装tomcat" tabindex="-1"><a class="header-anchor" href="#安装tomcat" aria-hidden="true">#</a> 安装Tomcat</h2><h3 id="_1下载安装" tabindex="-1"><a class="header-anchor" href="#_1下载安装" aria-hidden="true">#</a> ①下载安装</h3><p><a href="%5Bhttps://tomcat.apache.org%5D(https://tomcat.apache.org/)">tomcat官网</a></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-tomcat-10.0.5.tar.gz 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>bin:</strong> 存放 Tomcat 的 启动、停止 等相关命令<br><strong>lib:</strong> 存放 Tomcat 运行时所需要的 jar 包<br><strong>conf:</strong> Tomcat 配置文件目录<br><strong>logs:</strong> Tomcat 运行日志目录<br><strong>webapps:</strong> 存放运行在 Tomcat 服务器内的应用程序（JavaWeb 应用部署目录）<br><strong>work:</strong> 存放应用程序运行时动态生成的 java 代码和动态编译的 class 文件<br><strong>temp:</strong> 存放 Tomcat 运行时产生的临时文件</p></blockquote><h3 id="_2相关命令" tabindex="-1"><a class="header-anchor" href="#_2相关命令" aria-hidden="true">#</a> ②相关命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./startup.sh <span class="token comment">#启动</span>
<span class="token function">netstat</span> <span class="token parameter variable">-npl</span> <span class="token operator">|</span> <span class="token function">grep</span> :8080 <span class="token comment">#查看端口状态（Tomcat 默认监听 8080 端口）</span>
./shutdown.sh <span class="token comment">#停止</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),k={href:"https://blog.csdn.net/xietansheng/article/details/84405208",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"实现反向代理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现反向代理","aria-hidden":"true"},"#"),s(" 实现反向代理")],-1),h=n("h3",{id:"_1启动多个tomcat-分别监听不同的端口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1启动多个tomcat-分别监听不同的端口","aria-hidden":"true"},"#"),s(" ①启动多个tomcat，分别监听不同的端口")],-1),g={href:"https://amos-x.com/index.php/amos/archives/centos7-tomcat-run/",target:"_blank",rel:"noopener noreferrer"},x=i(`<h3 id="_2配置nginx" tabindex="-1"><a class="header-anchor" href="#_2配置nginx" aria-hidden="true">#</a> ②配置nginx</h3><p>找到nginx配置文件，进行反向代理配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
        listen       <span class="token number">9001</span><span class="token punctuation">;</span>   
        server_name  <span class="token number">0.0</span>.0.0   <span class="token comment">#监听地址</span>
   
        location  ~ /edu/ <span class="token punctuation">{</span>       
           root html<span class="token punctuation">;</span>  <span class="token comment">#/html目录</span>
           proxy_pass http://127.0.0.1:8081<span class="token punctuation">;</span>  <span class="token comment">#请求转向</span>
           index  index.html index.htm<span class="token punctuation">;</span>      <span class="token comment">#设置默认页       </span>
        <span class="token punctuation">}</span> 
        location  ~ /vod/ <span class="token punctuation">{</span>       
           root html<span class="token punctuation">;</span>  <span class="token comment">#/html目录</span>
           proxy_pass http://127.0.0.1:8081<span class="token punctuation">;</span>  <span class="token comment">#请求转向</span>
           index  index.html index.htm<span class="token punctuation">;</span>      <span class="token comment">#设置默认页       </span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开放对外访问的端口号9001</p><p>重启nginx服务器，使配置文件生效</p><h3 id="_3测试" tabindex="-1"><a class="header-anchor" href="#_3测试" aria-hidden="true">#</a> ③测试</h3>`,6),f={href:"http://127.0.0.1:9001/edu/",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),w={href:"http://127.0.0.1:9001/vod/",target:"_blank",rel:"noopener noreferrer"},y=i(`<blockquote><p>Nginx-location相关指令</p><p>​ =：用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，<br> ​ 就停止继续向下搜索并立即处理该请求<br> ​ ~：用于表示uri包含正则表达式，并且区分大小写<br> ​ ~*：用于表示uri包含正则表达式，并且不区分大小写<br> ​ ^~：用于不含正则表达式的uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配<br> ​ 注意: 如果uri包含正则表达式，则必须要有<sub>或者</sub>*标识。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 基本语法</span>
location <span class="token punctuation">[</span> <span class="token operator">=</span> <span class="token operator">|</span> ~ <span class="token operator">|</span> ~* <span class="token operator">|</span> ^~<span class="token punctuation">]</span> uri <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现负载均衡" tabindex="-1"><a class="header-anchor" href="#实现负载均衡" aria-hidden="true">#</a> 实现负载均衡</h2><p><strong>1、实现效果</strong></p>`,4),z={href:"http://192.168.xxx.xxx/edu/index.html",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),N=i(`<h3 id="负载分配策略" tabindex="-1"><a class="header-anchor" href="#负载分配策略" aria-hidden="true">#</a> 负载分配策略</h3><p>在linux下有Nginx、LVS、 Haproxy 等等服务可以提供负载均衡服务，而且Nginx提供了以下几种分配方式(策略)</p><ul><li><p><strong>1、轮询(默认)</strong></p><p>每个请求按时间顺序逐一分配到不 同的后端服务器，如果后端服务器down掉，能自动剔除</p></li><li><p><strong>2、weight</strong><br> weight代表权重默认为1,权重越高被分配的客户端越多。<br> 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。例如: 。</p></li><li><p><strong>3、ip hash</strong></p><p>每个请求按访问ip的hash结果分配, 这样每个访客固定访问一个后端服务器,可以解诀session的问题。例如:</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>upstream server pool<span class="token punctuation">{</span>
  ip_ <span class="token builtin class-name">hash</span>
  server <span class="token number">192.168</span>.5.21:80
  server <span class="token number">192.168</span>.5.22:80
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>4、fair (第三方)</strong><br> 按后端服务器的响应时间来分配请求，响应时间短的优先分配</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>upstream server_pool 
	server <span class="token number">192.168</span>.5.21:80<span class="token punctuation">;</span>
	server <span class="token number">192.168</span>.5.22:80<span class="token punctuation">;</span>
	fair<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现动静分离" tabindex="-1"><a class="header-anchor" href="#实现动静分离" aria-hidden="true">#</a> 实现动静分离</h2><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291535362.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>​<br> 通过location指定不同的后缀名实现不同的请求转发。通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体Expires定义:<br> 是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(<br> 如果经常更新的文件，不建议使用Expires来缓存)，如果设置3d, 表示在这3天之内访问这个URL,<br> 发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304,如果有修改，则直接从服务器重新下载，返回状态码200。</p></blockquote><p><strong>2、准备工作</strong></p><blockquote><p>(1) 在liunx系统中准备静态资源，用于进行访问</p><p>/data/image 图片文件夹</p><p>/data/www html文件夹</p></blockquote><p><strong>3、具体配置</strong></p><blockquote><p>(1) 在nginx配置文件中进行配置</p></blockquote><div class="language-clike line-numbers-mode" data-ext="clike"><pre class="language-clike"><code>location <span class="token operator">/</span>www<span class="token operator">/</span><span class="token punctuation">{</span>
	root <span class="token operator">/</span>data<span class="token operator">/</span><span class="token punctuation">;</span>
	index index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
location <span class="token operator">/</span>image<span class="token operator">/</span><span class="token punctuation">{</span>
	root <span class="token operator">/</span>data<span class="token operator">/</span><span class="token punctuation">;</span>
	autoindex on<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、实际测试</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost/www/index.html
http://1ocalhost/image/1.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现高可用集群" tabindex="-1"><a class="header-anchor" href="#实现高可用集群" aria-hidden="true">#</a> 实现高可用集群</h2><p><strong>1、什么是nginx高可用</strong></p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291536179.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>2、配置高可用的准备工作</strong></p><blockquote><p>(1) 需要两台服务器192.168.17.129 和192.168.17.131<br> (2) 在两台服务器安装nginx.<br> (3) 在两合服务器安装keepalived.</p></blockquote><p><strong>3、在两台服务器安装keepalived</strong><br> 使用yum命令进行安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ yum <span class="token function">install</span> keepalived
$ <span class="token function">rpm</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-a</span> keepalived    <span class="token comment">#查看是否已经安装上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认安装路径: /etc/keepalived</p><p>安装之后，在etc里面生成目录keepalived, 有配置文件keepalived.conf</p><p><strong>4、完成高可用配置(主从配置)</strong></p><p>（1）修改keepalived的配置文件<code>keepalived.conf</code>为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>global_defs <span class="token punctuation">{</span>
	notification_email <span class="token punctuation">{</span>
	  acassen@firewall.loc
	  failover@firewall.loc
	  sysadmin@firewall.loc
	<span class="token punctuation">}</span>
	notification_email_from Alexandre.Cassen@firewall.loc
	smtp_ server <span class="token number">192.168</span>.17.129
	smtp_connect_timeout <span class="token number">30</span>
	router_id LVS_DEVEL	<span class="token comment"># LVS_DEVEL这字段在/etc/hosts文件中看；通过它访问到主机</span>
<span class="token punctuation">}</span>

vrrp_script chk_http_ port <span class="token punctuation">{</span>
	script <span class="token string">&quot;/usr/local/src/nginx_check.sh&quot;</span>
	interval <span class="token number">2</span>   <span class="token comment"># (检测脚本执行的间隔)2s</span>
	weight <span class="token number">2</span>  <span class="token comment">#权重，如果这个脚本检测为真，服务器权重+2</span>
<span class="token punctuation">}</span>

vrrp_instance VI_1 <span class="token punctuation">{</span>
	state BACKUP   <span class="token comment"># 备份服务器上将MASTER 改为BACKUP</span>
	interface ens33 //网卡名称
	virtual_router_id <span class="token number">51</span> <span class="token comment"># 主、备机的virtual_router_id必须相同</span>
	priority <span class="token number">100</span>   <span class="token comment">#主、备机取不同的优先级，主机值较大，备份机值较小</span>
	advert_int <span class="token number">1</span>	<span class="token comment">#每隔1s发送一次心跳</span>
	authentication <span class="token punctuation">{</span>	<span class="token comment"># 校验方式， 类型是密码，密码1111</span>
        auth <span class="token builtin class-name">type</span> PASS
        auth pass <span class="token number">1111</span>
    <span class="token punctuation">}</span>
	virtual_ipaddress <span class="token punctuation">{</span> <span class="token comment"># 虛拟ip</span>
		<span class="token number">192.168</span>.17.50 // VRRP H虛拟ip地址
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在路径/usr/local/src/ 下新建检测脚本 nginx_check.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/bash</span>
<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> <span class="token parameter variable">-C</span> nginx -no-header <span class="token operator">|</span> <span class="token function">wc</span> - <span class="token number">1</span><span class="token variable">\`</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$A</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
	/usr/local/nginx/sbin/nginx
	<span class="token function">sleep</span> <span class="token number">2</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> <span class="token parameter variable">-C</span> nginx --no-header<span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-1</span><span class="token variable">\`</span></span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
		<span class="token function">killall</span> keepalived
	<span class="token keyword">fi</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 把两台服务器上nginx和keepalived启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ systemctl start keepalived.service		<span class="token comment">#keepalived启动</span>
$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span> I <span class="token function">grep</span> keepalived		<span class="token comment">#查看keepalived是否启动</span>
$ systemctl stop keepalived.service  <span class="token comment">#keepalived停止</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5、最终测试</strong></p><p>(1) 在浏览器地址栏输入虚拟ip地址192.168.17.50</p><p>(2) 把主服务器(192.168.17.129) nginx和keealived停止，再输入192.168.17.50.</p><h2 id="nginx原理解析" tabindex="-1"><a class="header-anchor" href="#nginx原理解析" aria-hidden="true">#</a> Nginx原理解析</h2><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291537327.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>​ Nginx 启动之后，在 Linux 系统中有两个进程，一个为 master，一个为 worker。master 作为管理员不参与任何工作，只负责给多个<br> worker 分配不同的任务（worker 一般有多个）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> nginx 
root     <span class="token number">20473</span>     <span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">2019</span> ?        00:00:00 nginx: master process /usr/sbin/nginx 
nginx     <span class="token number">4628</span> <span class="token number">20473</span>  <span class="token number">0</span> Jan06 ?        00:00:00 nginx: worker process 
nginx     <span class="token number">4629</span> <span class="token number">20473</span>  <span class="token number">0</span> Jan06 ?        00:00:00 nginx: worker process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="worker-是如何工作的" tabindex="-1"><a class="header-anchor" href="#worker-是如何工作的" aria-hidden="true">#</a> worker 是如何工作的？</h3><p>​ 客户端发送一个请求首先要经过 master，管理员收到请求后会将请求通知给 worker，多个 worker 以<strong>争抢</strong>的机制来抢夺任务，得到任务的<br> worker 会将请求经由 tomcat 等做请求转发、反向代理、访问数据库等（nginx 本身是不直接支持 java 的）。</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/202303291537196.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="master-workers-的机制的好处" tabindex="-1"><a class="header-anchor" href="#master-workers-的机制的好处" aria-hidden="true">#</a> master-workers 的机制的好处</h3><ul><li>对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。</li><li>采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快启动新的worker<br> 进程。当然，worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</li></ul><h3 id="设置多少个-worker-合适" tabindex="-1"><a class="header-anchor" href="#设置多少个-worker-合适" aria-hidden="true">#</a> 设置多少个 worker 合适？</h3><p>​ Nginx 和 redis 类似，都采用了 io 多路复用机制，每个 worker 都是一个独立的进程，每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求，每个<br> worker 的线程可以把一个 cpu 的性能发挥到极致，因此，<strong>worker 数和服务器的 cpu 数相等是最为适宜的</strong>。设少了会浪费 cpu，设多了会造成<br> cpu 频繁切换上下文带来的损耗</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置worker数量</span>
worker.processes <span class="token number">4</span> 

<span class="token comment"># work绑定cpu(4work绑定4cpu)</span>
worker_cpu_affinity 0001 0010 0100 <span class="token number">1000</span>

<span class="token comment"># work绑定cpu (4work绑定8cpu中的4个)</span>
worker_cpu_affinity 0000001 00000010 00000100 00001000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接数-worker-connection" tabindex="-1"><a class="header-anchor" href="#连接数-worker-connection" aria-hidden="true">#</a> 连接数 worker_connection</h3><p>​ 这个值是表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 <strong>worker_connections *<br> worker_processes</strong>。当然，这里说的是最大连接数，对于HTTP 请 求 本 地 资 源 来 说 ， 能 够 支 持 的 最 大 并 发 数 量 是<br> worker_connections * worker_processes，如果是支持 http1.1 的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是：<br> worker_connections * worker_processes /2，而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections *<br> worker_processes/4。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。</p><h3 id="两个问题" tabindex="-1"><a class="header-anchor" href="#两个问题" aria-hidden="true">#</a> 两个问题</h3><p><strong>发送请求，占用了woker的几个连接数?</strong><br> 2或者4个。</p><p><strong>nginx有一个master,有四个woker,每个woker支持最大的连接数1024,支持的最大并发数是多少?</strong><br> 普通的静态访问最大并发数是: worker connections * worker processes /2，<br> 而如果是HTTP作为反向代理来说，最大并发数量应该是worker connections * worker processes/4</p>`,52),T={href:"http://www.atguigu.com/download_detail.shtml?v=221",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,"知识整理 | Monster",-1);function E(P,S){const a=l("ExternalLinkIcon");return o(),r("div",null,[c,n("blockquote",null,[n("p",null,[s("a. 直接下载"),d,s("安装包，地址："),n("a",u,[s("https://nginx.org/en/download.html"),e(a)])]),m]),v,n("p",null,[s("注：详细过程可参考"),n("a",k,[s("linux下安装tomcat"),e(a)])]),b,h,n("p",null,[s("详细过程可以参考"),n("a",g,[s("开启多个tomcat"),e(a)])]),x,n("p",null,[s("访问"),n("a",f,[s("http://127.0.0.1:9001/edu/"),e(a)]),s(" 直接跳转到127.0.0.1:8081"),_,s(" 访问"),n("a",w,[s("http://127.0.0.1:9001/vod/"),e(a)]),s(" 直接跳转到127.0.0.1:8082")]),y,n("blockquote",null,[n("p",null,[s("(1) 浏览器地址栏输入地址"),n("a",z,[s("http://192.168.xxx.xxx/edu/index.html"),e(a)]),s(", 负载均衡效果，平均到8080"),q,s(" 和8081端口中，")])]),N,n("p",null,[s("知识来源 | "),n("a",T,[s("尚硅谷Nginx"),e(a)])]),$])}const V=t(p,[["render",E],["__file","nginx.html.vue"]]);export{V as default};
