import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as n,b as s,d as a,w as u,e as t}from"./app-ff1d42f3.js";const r={},d=t('<blockquote><p>该文章偏基础，如果您已掌握以下几个问题，请查看更多感兴趣文章~</p><ul><li>获取Class实例的方式有哪些</li><li>谈谈你对Class类的理解</li><li>什么时候会发生类初始化</li><li>创建Class对应运行时类的对象时需要注意什么</li><li>在工程或module的src目录下有名为”jdbc.properties”的配置文件，文件内容为：name=Tom。如何在程序中通过代码获取Tom这个变量值。请使用代码实现。</li><li>双亲委派机制</li><li>动态代理</li><li>策略模式+反射去除冗余if</li></ul></blockquote><h2 id="一、反射的概述" tabindex="-1"><a class="header-anchor" href="#一、反射的概述" aria-hidden="true">#</a> 一、反射的概述</h2><h3 id="_1-关于反射的理解" tabindex="-1"><a class="header-anchor" href="#_1-关于反射的理解" aria-hidden="true">#</a> 1.关于反射的理解</h3><p>Reflection（反射)是被视为<code>动态语言</code>的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：<br> 反射</p><p><strong>框架 = 反射 + 注解 + 设计模式</strong>。</p><blockquote><p><strong>动态语言</strong>：是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是<br> 在运行时代码可以根据某些条件改变自身结构。<br> 主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。</p><p><strong>静态语言</strong>:与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++</p><p>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。</p></blockquote><h3 id="_2-体会反射机制的-动态性" tabindex="-1"><a class="header-anchor" href="#_2-体会反射机制的-动态性" aria-hidden="true">#</a> 2.体会反射机制的“动态性”</h3><blockquote><p>在 Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能称为<br> Java 语言的反射机制。</p></blockquote><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/fasnheliucheng.jpg" alt="类的加载过程" tabindex="0" loading="lazy"><figcaption>类的加载过程</figcaption></figure><h2 id="二、-class类" tabindex="-1"><a class="header-anchor" href="#二、-class类" aria-hidden="true">#</a> 二、 Class类</h2><h3 id="_2-1-class类的理解" tabindex="-1"><a class="header-anchor" href="#_2-1-class类的理解" aria-hidden="true">#</a> 2.1 Class类的理解</h3>',12),k=n("p",null,[n("strong",null,"类加载的过程"),s("：程序经过javac命令以后，会生成一个或者多个字节码文件(.class结尾)"),n("br"),s(" ，然后我们使用java命令对某个字节码文件进行解释运行，这就相当于将某个字节码加载到内存中，这个过程就称为类的加载。")],-1),m=n("p",null,"Class本身也是一个类，Class 对象只能由系统建立对象",-1),v=n("p",null,"一个加载的类在 JVM 中只会有一个Class实例",-1),b=n("p",null,"一个Class对象对应的是一个加载到JVM中的一个.class文件",-1),g=t(`<h3 id="_2-2-获取class实例的几种方式" tabindex="-1"><a class="header-anchor" href="#_2-2-获取class实例的几种方式" aria-hidden="true">#</a> 2.2 获取Class实例的几种方式</h3><h4 id="_1-调用运行时类的属性-class" tabindex="-1"><a class="header-anchor" href="#_1-调用运行时类的属性-class" aria-hidden="true">#</a> ① 调用运行时类的属性：<code>.class</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> clazz1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2通过运行时类的对象-调用getclass" tabindex="-1"><a class="header-anchor" href="#_2通过运行时类的对象-调用getclass" aria-hidden="true">#</a> ②通过运行时类的对象，调用<code>getClass()</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> clazz2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3调用class的静态方法-forname-string-classpath" tabindex="-1"><a class="header-anchor" href="#_3调用class的静态方法-forname-string-classpath" aria-hidden="true">#</a> ③调用Class的静态方法：<code>forName(String classPath</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> clazz3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.monster.java.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4使用类的加载器-classloader" tabindex="-1"><a class="header-anchor" href="#_4使用类的加载器-classloader" aria-hidden="true">#</a> ④使用类的加载器：<code>ClassLoader</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ReflectionTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> clazz4 <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.java.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-总结-创建类的对象的方式" tabindex="-1"><a class="header-anchor" href="#_2-3-总结-创建类的对象的方式" aria-hidden="true">#</a> 2.3 总结：创建类的对象的方式</h3><blockquote><ul><li>new + 构造器</li><li>要创建Xxx类的对象，可以考虑：Xxx、Xxxs、XxxFactory、XxxBuilder类中查看是否有静态方法的存在。可以调用其静态方法，创建Xxx对象。</li><li>通过反射</li></ul></blockquote><h3 id="_2-4-class实例可以是哪些结构的说明" tabindex="-1"><a class="header-anchor" href="#_2-4-class实例可以是哪些结构的说明" aria-hidden="true">#</a> 2.4 Class实例可以是哪些结构的说明</h3><ul><li>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><h2 id="三、了解classloader" tabindex="-1"><a class="header-anchor" href="#三、了解classloader" aria-hidden="true">#</a> 三、了解ClassLoader</h2><h3 id="_3-1-类的加载过程" tabindex="-1"><a class="header-anchor" href="#_3-1-类的加载过程" aria-hidden="true">#</a> 3.1 类的加载过程</h3><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/classjiazai.jpg" alt="类的加载过程" tabindex="0" loading="lazy"><figcaption>类的加载过程</figcaption></figure><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/shengmingzhouqi.jpg" alt="类的加载过程" tabindex="0" loading="lazy"><figcaption>类的加载过程</figcaption></figure><p><strong>加载</strong><br> ：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p><p><strong>链接</strong>：将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><p>​ <strong>验证</strong>：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</p><p>​ <strong>准备</strong>：正式为类变量（static）分配内存并 设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配</p><p>​ <strong>解析</strong>：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</p><p><strong>初始化</strong>：</p><ul><li><p>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。类构造器<code>&lt;clinit&gt;()</code><br> 是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）；</p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</p></li><li><p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确加锁和同步</p><blockquote><p>问题：什么时候会发生类初始化 ?</p><ul><li><strong>类的主动引用</strong> （ 一定会发生类的初始化 ） <ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li>**类的被动引用 **（ 不会发生类的初始化 ） <ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化,当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></li></ul></blockquote></li></ul><h3 id="_3-2-类的加载器的作用" tabindex="-1"><a class="header-anchor" href="#_3-2-类的加载器的作用" aria-hidden="true">#</a> 3.2 类的加载器的作用</h3><blockquote><p><strong>类加载器</strong><br> ，顾名思义，就是加载类到内存中。换点专业的话来说，将class文件字节码加载到内存中，并将这些静态数据转换为<code>方法区的运行时数据结构</code><br> ，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</p></blockquote><blockquote><p><strong>类缓存</strong>：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载一段时间（也就是缓存一段时间）。不过JVM垃圾回收机制可以回收这些Class对象。</p></blockquote><h3 id="_3-3-类的加载器的分类" tabindex="-1"><a class="header-anchor" href="#_3-3-类的加载器的分类" aria-hidden="true">#</a> 3.3 类的加载器的分类</h3><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/jiazaiqifenlei.jpg" alt="类的加载过程" tabindex="0" loading="lazy"><figcaption>类的加载过程</figcaption></figure><blockquote><p><strong>双亲委派机制</strong>：当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p></blockquote><p>我们来看一下源码，重要步骤的注释说明已经写在了对应位置：</p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202304031027240.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>双亲委派机制的<strong>作用</strong>：</p><ul><li><code>防止重复加载同一个.class</code>。简单而言，向上一级询问是否加载过了，如果加载过了就不用再加载一遍。保证数据安全</li><li><code>保证核心.class不能被篡改</code>（沙箱安全机制）。简单而言，如果有人想想替换系统级别的类：String.java。篡改它的实现，在这种机制下这些系统的类已经被Bootstrap<br> classLoader加载过了（当一个类需要加载的时候，最先去尝试加载的就BootstrapClassLoader），所以其他类加载器并没有机会再去加载，从一定程度上防止了危险代码的植入</li></ul></blockquote><h3 id="_3-4-java类编译、运行的执行的流程" tabindex="-1"><a class="header-anchor" href="#_3-4-java类编译、运行的执行的流程" aria-hidden="true">#</a> 3.4 Java类编译、运行的执行的流程</h3><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/yunxingliucheng.jpg" alt="类的加载过程" tabindex="0" loading="lazy"><figcaption>类的加载过程</figcaption></figure><h3 id="_3-5-使用classloader加载src目录下的配置文件" tabindex="-1"><a class="header-anchor" href="#_3-5-使用classloader加载src目录下的配置文件" aria-hidden="true">#</a> 3.5 使用Classloader加载src目录下的配置文件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">Properties</span> pros <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//此时的文件默认在当前的module下。</span>
        <span class="token comment">//读取配置文件的方式一：</span>
<span class="token comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span>
<span class="token comment">//        FileInputStream fis = new FileInputStream(&quot;src\\\\jdbc1.properties&quot;);</span>
<span class="token comment">//        pros.load(fis);</span>

        <span class="token comment">//读取配置文件的方式二：使用ClassLoader</span>
        <span class="token comment">//配置文件默认识别为：当前module的src下</span>
        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc1.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot;,password = &quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、反射应用" tabindex="-1"><a class="header-anchor" href="#四、反射应用" aria-hidden="true">#</a> 四、反射应用</h2><h3 id="_4-1-创建运行时类的对象" tabindex="-1"><a class="header-anchor" href="#_4-1-创建运行时类的对象" aria-hidden="true">#</a> 4.1 创建运行时类的对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>newInstance()</strong>:调用此方法，创建对应的运行时类的对象。内部调用了运行时类的<code>空参的构造器</code>。</p></blockquote><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/fansheyuanma.jpg" alt="Java空参构造" tabindex="0" loading="lazy"><figcaption>Java空参构造</figcaption></figure><p>我们来看下**newInstance()**的源码，它对运行时类的构造函数进行了查找，并且限制了<code>Member.DECLARED（值为1）</code><br> ，而1要求了构造器的权限，如下图所示。</p><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/MemberDeclare.png" alt="Java空参构造" tabindex="0" loading="lazy"><figcaption>Java空参构造</figcaption></figure><p>因此要想此方法正常的创建运行时类的对象，要求：</p><blockquote><ul><li><p>运行时类必须提供<code>空参的构造器</code></p></li><li><p>空参的构造器的<code>访问权限得够</code>。通常，设置为public。</p></li></ul></blockquote><p>那么此时有个问题，<strong>为什么在javabean中要求提供一个public的空参构造器</strong></p><blockquote><ul><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器</li></ul></blockquote><p>此处要注意一点，<strong>并不是没有无参的构造器就不能创建对象</strong>。</p><h3 id="_4-2-获取运行时类的完整结构" tabindex="-1"><a class="header-anchor" href="#_4-2-获取运行时类的完整结构" aria-hidden="true">#</a> 4.2 获取运行时类的完整结构</h3><p>我们可以通过反射，获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//getMethods():获取当前运行时类及其所父类中声明为public权限的方法</span>
    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法</span>
    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//getConstructors():获取当前运行时类中声明为public的构造器</span>
    <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
     <span class="token comment">//getDeclaredConstructors():获取当前运行时类中声明的所的构造器</span>
    <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
     <span class="token comment">//获取运行时类的父类</span>
     <span class="token class-name">Class</span> superclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
     <span class="token comment">//获取运行时类的带泛型的父类</span>
     <span class="token class-name">Type</span> genericSuperclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//获取运行时类实现的接口</span>
     <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//获取运行时类的父类实现的接口</span>
     <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//获取运行时类所在的包</span>
    <span class="token class-name">Package</span> pack <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//获取运行时类声明的注解</span>
    <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//获取运行时类的带泛型的父类的泛型</span>
    <span class="token class-name">Type</span> genericSuperclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ParameterizedType</span> paramType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericSuperclass<span class="token punctuation">;</span>
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> paramType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  System.out.println(actualTypeArguments[0].getTypeName());</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span>actualTypeArguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-调用运行时类的指定结构" tabindex="-1"><a class="header-anchor" href="#_4-3-调用运行时类的指定结构" aria-hidden="true">#</a> 4.3 调用运行时类的指定结构</h3><h4 id="_1调用指定的属性" tabindex="-1"><a class="header-anchor" href="#_1调用指定的属性" aria-hidden="true">#</a> ①调用指定的属性</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//创建运行时类的对象</span>
		<span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span>
    <span class="token class-name">Field</span> name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2.保证当前属性是可访问的</span>
    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3.获取、设置指定对象的此属性值</span>
    name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-调用指定的方法" tabindex="-1"><a class="header-anchor" href="#_2-调用指定的方法" aria-hidden="true">#</a> ② 调用指定的方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

	<span class="token comment">//创建运行时类的对象</span>
	<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/*
     1.获取指定的某个方法 getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表
  */</span>
	<span class="token class-name">Method</span> show <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;show&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//  2.保证当前方法是可访问的</span>
	show<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/*
     3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参
     invoke()的返回值即为对应类中调用的方法的返回值。
  */</span>
	<span class="token class-name">Object</span> returnValue <span class="token operator">=</span> show<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">&quot;CHN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//String nation = p.show(&quot;CHN&quot;);</span>

	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;*************如何调用静态方法*****************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Method</span> showDesc <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;showDesc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	showDesc<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//如果调用的运行时类中的方法没返回值，则此invoke()返回null</span>
	<span class="token class-name">Object</span> returnVal <span class="token operator">=</span> showDesc<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-调用指定的构造器" tabindex="-1"><a class="header-anchor" href="#_3-调用指定的构造器" aria-hidden="true">#</a> ③ 调用指定的构造器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	 <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token comment">// private Person(String name)</span>
    <span class="token comment">/* 1.获取指定的构造器getDeclaredConstructor():参数：指明构造器的参数列表 */</span>

    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2.保证此构造器是可访问的</span>
    constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3.调用此构造器创建运行时类的对象</span>
    <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-动态代理" tabindex="-1"><a class="header-anchor" href="#_4-4-动态代理" aria-hidden="true">#</a> 4.4 动态代理</h3><h4 id="_1-代理模式的原理" tabindex="-1"><a class="header-anchor" href="#_1-代理模式的原理" aria-hidden="true">#</a> ① 代理模式的原理</h4><blockquote><p>使用一个代理将对象包装起来,<br> 然后用<code>该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上</code>。</p></blockquote><h4 id="_2-静态代理" tabindex="-1"><a class="header-anchor" href="#_2-静态代理" aria-hidden="true">#</a> ② 静态代理</h4><p>代码举例说明：实现Runnable接口的方法创建多线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//相当于被代理类</span>

<span class="token class-name">Class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//相当于代理类</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">MyThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动线程；调用线程的run()</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再简单举一个例子，赵老板（<strong>被代理类</strong>）有个秘书叫做钱秘书（<strong>代理类</strong><br> ），钱秘书负责安排赵老板的事情，比如今天开会，明天出差等等。某天，孙老板想要约赵老板出去谈生意，于是便联系了钱秘书，跟钱秘书商榷好在3天后跟赵老板商谈要是，最后钱秘书5个小时后将这件事询问了赵老板意见并回电话告诉孙老板三天后见（<br><strong>被代理类的调用要通过代理类，代理类可以决定什么时候将方法转到原始对象上</strong>）。</p><p>看完这个例子，感觉代理也不错如此嘛，但是仔细想一想，如果某天赵老板新招了个李秘书，李秘书负责a方面，赵秘书负责b方面，那赵老板是不是告诉每个人自己新加了一个秘书叫李秘书，负责a方面，电话巴拉巴拉，a方面有事找李秘书巴拉巴拉，而李秘书是不是也要在接到预约赵老板a方面事情的电话时说自己不负责这方面呢。这也正是<br><strong>静态代理的缺点</strong></p><blockquote><p>静态代理的缺点</p><ul><li><p>代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。</p></li><li><p>每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</p></li></ul></blockquote><h4 id="_3-动态代理" tabindex="-1"><a class="header-anchor" href="#_3-动态代理" aria-hidden="true">#</a> ③ 动态代理</h4><p><strong>深入理解动态代理的思想</strong></p><p>既然我们知道了静态代理的缺点，即当下有两个问题需要我们去解决</p><blockquote><p>问题一：<strong>如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象</strong>。</p></blockquote><blockquote><p>问题二：<strong>当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a</strong></p></blockquote><p>还是通过赵老板的例子来说明，对于这两个问题，一个公司前台就完美解决了这个问题，也即赵老板的信息跟公司前台的电话是绑定的，也就是当我想预约赵老板的时候，先打给前台，前台询问你想找a方面的业务还是b方面的业务，然后帮你转接到负责这个业务的赵老板的秘书那里。</p><p>说道这里，想必你也已经理解了这个思想，其实这也就是<strong>动态代理</strong>的核心思想</p><blockquote><p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。</p></blockquote><p><strong>动态代理相关API</strong></p><figure><img src="https://monster-note.oss-cn-hangzhou.aliyuncs.com/img/jvm/202304031029752.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>代码实现动态代理</strong></p><p>声明一个接口，即钱秘书和李秘书共同的职责，安排负责事情</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token class-name">String</span> someThing<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现被代理类(赵老板)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">BossZhao</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;我是赵老板&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token class-name">String</span> someThing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我正在处理&quot;</span> <span class="token operator">+</span> someThing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过赵老板的信息拿到公司前台的电话，并被告知联系哪个秘书，与某个秘书进行商谈</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">{</span>
    <span class="token comment">//调用此方法，返回一个代理类的对象。解决问题一</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//obj:被代理类的对象</span>
        <span class="token class-name">MyInvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        handler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>秘书告知赵老板做某件事</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span><span class="token comment">//需要使用被代理类的对象进行赋值</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()。解决问题二</span>
    <span class="token comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

        <span class="token comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span>
        <span class="token comment">//obj:被代理类的对象</span>
        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span>
        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BossZhao</span> bossZhao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BossZhao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//proxyInstance:代理类的对象</span>
        <span class="token class-name">Human</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Human</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>bossZhao<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span>
        <span class="token class-name">String</span> belief <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>belief<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果：我是赵老板</span>
        proxyInstance<span class="token punctuation">.</span><span class="token function">deal</span><span class="token punctuation">(</span><span class="token string">&quot;a方面的事情&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果：我正在处理a方面的事情</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难想到，如果<strong>在执行目标方法之前、之后插入一些通用处理</strong>，那不就变成了<strong>AOP</strong>吗。</p><figure><img src="https://raw.githubusercontent.com/MyMonsterCat/md_image/main/基础/Java反射机制/aop.jpg" alt="Java空参构造" tabindex="0" loading="lazy"><figcaption>Java空参构造</figcaption></figure><h2 id="五、反射实战-利用反射-策略模式去除过多的if" tabindex="-1"><a class="header-anchor" href="#五、反射实战-利用反射-策略模式去除过多的if" aria-hidden="true">#</a> 五、反射实战：利用反射+策略模式去除过多的if</h2>`,92),h={href:"http://c.biancheng.net/view/1378.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>最近学习了一些设计模式以后，在实际的生产应用中总想着尝试用上一些设计模式，正好上次遇到了一个要分7个if判断的场景，经过权衡，最终决定采用反射+策略模式来去除过多的if判断。大致的思想为，先定义一个接口抽取出抽象方法，然后把每个if中的逻辑抽取出到各实现类中，接着将各实现类放入到枚举类中，最后根据要求通过反射查找相应的策略执行相应的逻辑。</p><p><strong>定义一个接口抽取出抽象方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RecordStrategy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 策略方法-根据id获取更多的信息
     * 通过id去查询信息，封装到对应的VO里面并返回
     */</span>
    <span class="token class-name">Object</span> <span class="token function">moreInformation</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>把每个if中的逻辑抽取出到各实现类中</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//这里只展示其中一个实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlarmPassStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">RecordStrategy</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">moreInformation</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//具体业务</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将各实现类放入到枚举类中</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 事项策略枚举类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RecordEnum</span> <span class="token punctuation">{</span>

    <span class="token function">CLEAR_ALARM_PASS</span><span class="token punctuation">(</span><span class="token string">&quot;4-3&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AlarmPassStrategy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 存储事项类型（matterType - taskType）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 对应事项类型具体的策略实现类
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span> clazz<span class="token punctuation">;</span>

    <span class="token class-name">RecordEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>根据要求通过反射查找相应的策略执行相应的逻辑</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 策略管理类，通过反射动态获取额外数据
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token class-name">BaseRecordCommonVO</span> commonVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 组装类型 如3-1代表xxx</span>
        <span class="token class-name">Integer</span> matterType <span class="token operator">=</span> commonVO<span class="token punctuation">.</span><span class="token function">getMatterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> taskType <span class="token operator">=</span> commonVO<span class="token punctuation">.</span><span class="token function">getTaskType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> matterType <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> taskType<span class="token punctuation">;</span>
        <span class="token comment">// 得到对应的策略类</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">StrategySingleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> resultMap<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 获取任务id（通过任务id去获取额外信息）</span>
        <span class="token class-name">String</span> taskId <span class="token operator">=</span> commonVO<span class="token punctuation">.</span><span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;moreInformation&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Object</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>

            resultMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;defaultMap&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> resultMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本文参考文章或视频</p>`,10),y={href:"https://blog.csdn.net/codeyanbao/article/details/82875064",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.jianshu.com/p/1e4011617650",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.atguigu.com/download_detail.shtml?v=129",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[s("我是"),n("code",null,"Monster"),s("，与你一起成长，那~下篇文章见O(∩_∩)O！")],-1);function x(z,q){const c=p("font"),e=p("ExternalLinkIcon");return l(),i("div",null,[d,n("blockquote",null,[k,n("p",null,[s("加载到内存中的类，我们就称为 运行时类。"),a(c,{color:"orange"},{default:u(()=>[s("此运行时类，就作为Class类的一个实例")]),_:1})]),m,v,b]),g,n("p",null,[n("a",h,[s("策略模式详细介绍请移步观看"),a(e)])]),f,n("p",null,[n("a",y,[s("通俗易懂的双亲委派机制"),a(e)])]),n("p",null,[n("a",w,[s("java双亲委派机制及作用"),a(e)])]),n("p",null,[n("a",j,[s("尚硅谷java基础"),a(e)])]),_])}const M=o(r,[["render",x],["__file","reflex-mechanism.html.vue"]]);export{M as default};
